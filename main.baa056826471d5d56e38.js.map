{"version":3,"file":"main.baa056826471d5d56e38.js","mappings":"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","sources":["webpack://slimacy/./src/app/utils/events.ts","webpack://slimacy/./src/app/hero/hero.ts","webpack://slimacy/./src/app/world/world.ts","webpack://slimacy/./src/app/ui/components/inputs/dev-input.tsx","webpack://slimacy/./src/index.tsx","webpack://slimacy/./src/app/ui/index.tsx","webpack://slimacy/./src/app/utils/utils.ts"],"sourcesContent":["export enum Events {\n  HERO_SPEED = \"hero-speed:changed\",\n}\n\nfunction on(\n  eventType: Events,\n  listener: EventListenerOrEventListenerObject\n): void {\n  document.addEventListener(eventType, listener);\n}\n\nfunction off(\n  eventType: Events,\n  listener: EventListenerOrEventListenerObject\n): void {\n  document.removeEventListener(eventType, listener);\n}\n\nfunction once(eventType: Events, listener: (arg0: any) => void): void {\n  on(eventType, handleEventOnce);\n\n  function handleEventOnce(event: any) {\n    listener(event);\n    off(eventType, handleEventOnce);\n  }\n}\n\nfunction trigger(eventType: Events, data: any): void {\n  const event = new CustomEvent(eventType, { detail: data });\n  document.dispatchEvent(event);\n}\n\nexport { on, once, off, trigger };\n","import {\n  AnimatedSprite,\n  Container,\n  Resource,\n  Spritesheet,\n  Texture,\n  TextureSource,\n  Ticker,\n} from \"pixi.js\";\nimport spritesheetData from \"assets/hero/hero.json\";\n\nimport { Events } from \"app/utils/events\";\n\nexport enum CollisionTypes {\n  NONE = 0,\n  TOP = 1,\n  TOPRIGHT = 2,\n  RIGHT = 3,\n  BOTTOMRIGHT = 4,\n  BOTTOM = 5,\n  BOTTOMLEFT = 6,\n  LEFT = 7,\n  TOPLEFT = 8,\n  ALL = 9,\n}\n\nexport class Character extends Container {\n  private hero: AnimatedSprite;\n  private animations = new Map<string, Texture<Resource>[]>();\n  private currentAnimation: string;\n  private velocityVektor = { x: 0, y: 0 };\n  private speed = 5;\n  private pressedKeys = new Set<string>();\n  private collision = CollisionTypes.NONE;\n\n  constructor(screenWidth: number, screenHeight: number) {\n    super();\n\n    const texture = Texture.from(\"assets/hero/hero.png\");\n\n    const sheet = new Spritesheet(texture, spritesheetData);\n\n    sheet.parse((textures) => {\n      console.log(\"🚀 ~ file: index.ts:28 ~ sheet.parse ~ textures:\", textures);\n      Object.keys(spritesheetData.animations).forEach((key) => {\n        const animation =\n          spritesheetData.animations[\n            key as keyof typeof spritesheetData.animations\n          ];\n        const animationSprites = animation.map(\n          (stringy: TextureSource | TextureSource[]) => Texture.from(stringy)\n        );\n        this.animations.set(key, animationSprites);\n      });\n\n      this.hero = new AnimatedSprite(this.animations.get(\"xi72yowslimemoveup\"));\n      this.currentAnimation = \"xi72yowslimemoveup\";\n      this.hero.animationSpeed = 0.125;\n      this.hero.play();\n      this.hero.roundPixels = false;\n      this.hero.x = screenWidth / 2;\n      this.hero.y = screenHeight / 2;\n      this.addChild(this.hero);\n    });\n\n    document.addEventListener(\"keydown\", this.onKeyDown.bind(this));\n    document.addEventListener(\"keyup\", this.onKeyUp.bind(this));\n\n    document.addEventListener(Events.HERO_SPEED, (e: CustomEvent) => {\n      this.speed = e.detail.value;\n    });\n  }\n\n  private setVelocityVektor(xCrement: number, yCrement: number): void {\n    const x = this.velocityVektor.x + xCrement;\n    const y = this.velocityVektor.y + yCrement;\n\n    if (!(x < -this.speed || x > this.speed)) {\n      this.velocityVektor.x = x;\n    }\n    if (!(y < -this.speed || y > this.speed)) {\n      this.velocityVektor.y = y;\n    }\n  }\n\n  private setCurrentAnimation(name: string): void {\n    if (name && this.currentAnimation !== name) {\n      this.currentAnimation = name;\n      this.hero.textures = this.animations.get(name);\n      this.hero.play();\n    }\n  }\n\n  private onKeyDown(e: KeyboardEvent): void {\n    this.pressedKeys.add(e.code);\n    switch (e.code) {\n      case \"KeyW\":\n        this.setVelocityVektor(0, -this.speed);\n        break;\n\n      case \"KeyA\":\n        this.setVelocityVektor(-this.speed, 0);\n        break;\n\n      case \"KeyS\":\n        this.setVelocityVektor(0, this.speed);\n        break;\n\n      case \"KeyD\":\n        this.setVelocityVektor(this.speed, 0);\n        break;\n\n      default:\n        break;\n    }\n\n    if (this.pressedKeys.has(\"KeyW\") && this.pressedKeys.has(\"KeyS\")) {\n      this.velocityVektor.y = 0;\n    }\n\n    if (this.pressedKeys.has(\"KeyA\") && this.pressedKeys.has(\"KeyD\")) {\n      this.velocityVektor.x = 0;\n    }\n  }\n\n  private onKeyUp(e: KeyboardEvent): void {\n    this.pressedKeys.delete(e.code);\n    switch (e.code) {\n      case \"KeyW\":\n        this.setVelocityVektor(0, this.speed);\n        break;\n\n      case \"KeyA\":\n        this.setVelocityVektor(this.speed, 0);\n        break;\n\n      case \"KeyS\":\n        this.setVelocityVektor(0, -this.speed);\n        break;\n\n      case \"KeyD\":\n        this.setVelocityVektor(-this.speed, 0);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  private velocityNormalization(): { x: number; y: number } {\n    const x = this.velocityVektor.x;\n    const y = this.velocityVektor.y;\n    const length = Math.sqrt(x * x + y * y);\n    if (length > 0) {\n      return { x: x / length, y: y / length };\n    }\n    return { x, y };\n  }\n\n  private getMovementDirection(): string {\n    const x = this.velocityVektor.x;\n    const y = this.velocityVektor.y;\n\n    /*   if (x === 0 && y === 0) {\n      return \"xi72yowslimemoveup\";\n    } */\n\n    if (x > 0) {\n      return \"xi72yowslimemoveright\";\n    }\n\n    if (x < 0) {\n      return \"xi72yowslimemoveleft\";\n    }\n\n    if (y > 0) {\n      return \"xi72yowslimemovedown\";\n    }\n\n    if (y < 0) {\n      return \"xi72yowslimemoveup\";\n    }\n  }\n\n  public update(deltaTime: number): void {\n    const normalizedVelocity = this.velocityNormalization();\n    const movementDirection = this.getMovementDirection();\n    this.setCurrentAnimation(movementDirection);\n\n    const xDirection = normalizedVelocity.x * this.speed;\n    const yDirection = normalizedVelocity.y * this.speed;\n\n    switch (this.collision) {\n      case CollisionTypes.TOP:\n        this.hero.y += this.speed;\n        break;\n\n      case CollisionTypes.RIGHT:\n        this.hero.x -= this.speed;\n        break;\n      case CollisionTypes.BOTTOM:\n        this.hero.y -= this.speed;\n        break;\n      case CollisionTypes.LEFT:\n        this.hero.x += this.speed;\n        break;\n      case CollisionTypes.TOPLEFT:\n        this.hero.y += this.speed;\n        this.hero.x += this.speed;\n        break;\n      case CollisionTypes.TOPRIGHT:\n        this.hero.y += this.speed;\n        this.hero.x -= this.speed;\n        break;\n      case CollisionTypes.BOTTOMLEFT:\n        this.hero.y -= this.speed;\n        this.hero.x += this.speed;\n        break;\n      case CollisionTypes.BOTTOMRIGHT:\n        this.hero.y -= this.speed;\n        this.hero.x -= this.speed;\n        break;\n\n      case CollisionTypes.NONE:\n        break;\n\n      default:\n        break;\n    }\n    this.hero.x = this.hero.x + xDirection * deltaTime;\n    this.hero.y = this.hero.y + yDirection * deltaTime;\n  }\n\n  public setCollision(collision: CollisionTypes): void {\n    this.collision = collision;\n  }\n}\n","import {\n  AnimatedSprite,\n  Container,\n  Rectangle,\n  Resource,\n  Sprite,\n  Spritesheet,\n  Texture,\n  TextureSource,\n  Ticker,\n} from \"pixi.js\";\nimport ldtkData from \"assets/world/world.ldtk.json\";\n\nimport spritesheetData from \"assets/world/world.json\";\nimport { Character, CollisionTypes } from \"app/hero/hero\";\n\nexport class World extends Container {\n  private hero;\n  private collidingTiles: Sprite[] = [];\n\n  constructor(hero: Character) {\n    super();\n    this.hero = hero;\n    const texture = Texture.from(\"assets/world/world.png\");\n    const sheet = new Spritesheet(texture, spritesheetData);\n    sheet.parse((textures) => {\n      console.log(\n        \"🚀 ~ file: index.ts:28 ~ sheet.parse ~ textures:\",\n        textures,\n        ldtkData.levels[0].layerInstances[2].gridTiles\n      );\n\n      const colision = ldtkData.levels[0].layerInstances.find(\n        (layer) => layer.__type === \"IntGrid\"\n      ).intGridCsv;\n\n      const level = ldtkData.levels[0].layerInstances.find(\n        (layer) => layer.__type === \"Tiles\"\n      ).gridTiles;\n\n      const levelSprites = level.map((tile, i) => {\n        const piece: Sprite = new Sprite(\n          textures[`world_${tile.src[1]}_${tile.src[0]}.png`]\n        );\n        piece.x = tile.px[0];\n        piece.y = tile.px[1];\n        if (colision[i] === 2) this.collidingTiles.push(piece);\n        return piece;\n      });\n\n      console.log(this.collidingTiles.length);\n\n      this.addChild(...levelSprites);\n    });\n\n    Ticker.shared.add(this.update, this);\n  }\n\n  private update(deltaTime: number): void {\n    this.hero.update(deltaTime);\n    this.setCollisions();\n  }\n\n  private setCollisions(): void {\n    const collisions: CollisionTypes[] = [];\n    for (let i = 0; i < this.collidingTiles.length; i++) {\n      const tile = this.collidingTiles[i];\n      const hb = this.hero.getBounds();\n      const tb = tile.getBounds();\n\n      // detect colliding edge\n      const collision = this.detectCollision(hb, tb);\n      if (collision !== CollisionTypes.NONE) {\n        collisions.push(collision);\n      }\n    }\n    const uniqueCollisions = collisions.filter((element, index) => {\n      return collisions.indexOf(element) === index;\n    });\n\n    if (uniqueCollisions.length == 0) {\n      this.hero.setCollision(CollisionTypes.NONE);\n      return;\n    }\n\n    if (uniqueCollisions.length == 1) {\n      if (uniqueCollisions.includes(CollisionTypes.TOP)) {\n        this.hero.setCollision(CollisionTypes.TOP);\n      }\n      if (uniqueCollisions.includes(CollisionTypes.BOTTOM)) {\n        this.hero.setCollision(CollisionTypes.BOTTOM);\n      }\n      if (uniqueCollisions.includes(CollisionTypes.LEFT)) {\n        this.hero.setCollision(CollisionTypes.LEFT);\n      }\n      if (uniqueCollisions.includes(CollisionTypes.RIGHT)) {\n        this.hero.setCollision(CollisionTypes.RIGHT);\n      }\n    } else {\n      if (\n        uniqueCollisions.includes(CollisionTypes.TOP) &&\n        uniqueCollisions.includes(CollisionTypes.LEFT)\n      ) {\n        this.hero.setCollision(CollisionTypes.TOPLEFT);\n      }\n      if (\n        uniqueCollisions.includes(CollisionTypes.TOP) &&\n        uniqueCollisions.includes(CollisionTypes.RIGHT)\n      ) {\n        this.hero.setCollision(CollisionTypes.TOPRIGHT);\n      }\n      if (\n        uniqueCollisions.includes(CollisionTypes.BOTTOM) &&\n        uniqueCollisions.includes(CollisionTypes.LEFT)\n      ) {\n        this.hero.setCollision(CollisionTypes.BOTTOMLEFT);\n      }\n      if (\n        uniqueCollisions.includes(CollisionTypes.BOTTOM) &&\n        uniqueCollisions.includes(CollisionTypes.RIGHT)\n      ) {\n        this.hero.setCollision(CollisionTypes.BOTTOMRIGHT);\n      }\n    }\n  }\n\n  private multiplyVectors(a: number[], b: number[]) {\n    return a.map((x: number, i: number) => x * b[i]);\n  }\n\n  private vecAbs(a: [number, number]) {\n    return Math.sqrt(a[0] * a[0] + a[1] * a[1]);\n  }\n\n  private dotVecProduct(a: [number, number], b: [number, number]) {\n    const absA = this.vecAbs(a);\n    const absB = this.vecAbs(b);\n    const dotProduct = a[0] * b[0] + a[1] * b[1];\n    return dotProduct / (absA * absB);\n  }\n\n  private detectCollision(rect1: Rectangle, rect2: Rectangle): CollisionTypes {\n    const dx = rect2.x + rect2.width / 2 - (rect1.x + rect1.width / 2);\n    const dy = rect2.y + rect2.height / 2 - (rect1.y + rect1.height / 2);\n    const aw = (rect2.width + rect1.width) * 0.5;\n    const ah = (rect2.height + rect1.height) * 0.5;\n\n    if (Math.abs(dx) > aw || Math.abs(dy) > ah) return CollisionTypes.NONE;\n\n    if (Math.abs(dx / rect1.width) > Math.abs(dy / rect1.height)) {\n      if (dx < 0) return CollisionTypes.LEFT;\n      else return CollisionTypes.RIGHT;\n    } else {\n      if (dy < 0) return CollisionTypes.TOP;\n      else return CollisionTypes.BOTTOM;\n    }\n  }\n}\n","import { Events, trigger } from \"utils/events\";\nimport * as React from \"react\";\n\ninterface Props {\n  event: Events;\n  step?: number;\n  label?: string;\n}\n\nexport default function STInput({\n  event,\n  step = 0.01,\n  label,\n}: Props): JSX.Element {\n  const [value, setValue] = React.useState<number>(1);\n\n  React.useEffect(() => {\n    trigger(event, { value });\n  }, [value]);\n\n  return (\n    <div>\n      <label>{label}: </label>\n      <input\n        type=\"number\"\n        step={step}\n        value={value}\n        onChange={(e) => {\n          setValue(Number(e.target.value));\n        }}\n      />\n    </div>\n  );\n}\n","import { Application, Loader } from \"pixi.js\";\nimport * as PIXI from \"pixi.js\";\nimport { Character } from \"app/hero/hero\";\nimport { World } from \"app/world/world\";\n\nimport React from \"react\";\nimport UI from \"app/ui/\";\n\nimport { createRoot } from \"react-dom/client\";\nconst container = document.getElementById(\"pixi-overlay\");\nconst root = createRoot(container);\nroot.render(<UI />);\n\nimport { generateGenericAtlas } from \"app/utils/utils\";\nconsole.log(generateGenericAtlas(4, 4, 16, 16, \"world\"));\n\nPIXI.settings.SCALE_MODE = PIXI.SCALE_MODES.NEAREST;\n\nconst gameParam = {\n  view: document.getElementById(\"pixi-canvas\") as HTMLCanvasElement,\n  width: 160,\n  height: 90,\n  resolution: window.devicePixelRatio || 1,\n  autoDensity: true,\n  backgroundColor: 0x6495ed,\n  scale: 3,\n};\n\nconst app = new Application(gameParam);\n\nconst character = new Character(gameParam.width, gameParam.height);\n\nconst world = new World(character);\n\napp.stage.addChild(world);\n\napp.stage.addChild(character);\n\nfunction resizeGame() {\n  const viewport = {\n    width: window.innerWidth,\n    height: window.innerHeight,\n  };\n\n  const newGameWidth = viewport.width;\n  const newGameHeight = (newGameWidth * gameParam.height) / gameParam.width;\n\n  app.renderer.resize(newGameWidth, newGameHeight);\n  app.stage.scale.set(gameParam.scale, gameParam.scale);\n}\n\nwindow.addEventListener(\"resize\", resizeGame);\n\nresizeGame();\n","import React from \"react\";\nimport STInput from \"./components/inputs/dev-input\";\nimport { Events } from \"utils/events\";\n\nexport default function UI(): JSX.Element {\n  return (\n    <div style={{ display: \"flex\", justifyContent: \"end\", padding: 15 }}>\n      <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n        <h3 style={{ textAlign: \"center\" }}>Dev UI</h3>\n        <STInput event={Events.HERO_SPEED} label=\"hero speed\" />\n      </div>\n    </div>\n  );\n}\n","type Atlas = {\n  [key: string]: { [key: string]: unknown };\n};\n\nexport function generateGenericAtlas(\n  rows: number,\n  cols: number,\n  width: number,\n  height: number,\n  textureName: string\n): Atlas {\n  const atlas: Atlas = {};\n  atlas[\"frames\"] = {};\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      atlas[\"frames\"][`${textureName}_${i * width}_${j * height}.png`] = {\n        frame: {\n          x: j * width,\n          y: i * height,\n          w: width,\n          h: height,\n        },\n        rotated: false,\n        trimmed: false,\n        spriteSourceSize: {\n          x: 0,\n          y: 0,\n          w: width,\n          h: height,\n        },\n        sourceSize: {\n          w: width,\n          h: height,\n        },\n        pivot: {\n          x: 0.5,\n          y: 0.5,\n        },\n      };\n    }\n    atlas[\"meta\"] = {\n      app: \"slimacy-utils\",\n      version: \"1.0\",\n      image: `${textureName}.png`,\n      format: \"RGBA8888\",\n      size: {\n        w: width * cols,\n        h: height * rows,\n      },\n      scale: \"1\",\n      smartupdate: \"\",\n    };\n  }\n  return atlas;\n}\n"],"names":["Events","CollisionTypes","screenWidth","screenHeight","animations","Map","velocityVektor","x","y","speed","pressedKeys","Set","collision","NONE","texture","parse","textures","console","log","Object","keys","forEach","key","animationSprites","map","stringy","set","hero","get","currentAnimation","animationSpeed","play","roundPixels","addChild","document","addEventListener","onKeyDown","bind","onKeyUp","HERO_SPEED","e","detail","value","setVelocityVektor","xCrement","yCrement","this","setCurrentAnimation","name","add","code","has","delete","velocityNormalization","length","Math","sqrt","getMovementDirection","update","deltaTime","normalizedVelocity","movementDirection","xDirection","yDirection","TOP","RIGHT","BOTTOM","LEFT","TOPLEFT","TOPRIGHT","BOTTOMLEFT","BOTTOMRIGHT","setCollision","collidingTiles","colision","layer","__type","intGridCsv","levelSprites","gridTiles","tile","i","piece","src","px","push","setCollisions","collisions","hb","getBounds","tb","detectCollision","uniqueCollisions","filter","element","index","indexOf","includes","multiplyVectors","a","b","vecAbs","dotVecProduct","absA","absB","rect1","rect2","dx","width","dy","height","aw","ah","abs","STInput","event","step","label","setValue","eventType","data","CustomEvent","dispatchEvent","trigger","type","onChange","Number","target","container","getElementById","render","style","display","justifyContent","padding","flexDirection","textAlign","rows","cols","textureName","atlas","j","frame","w","h","rotated","trimmed","spriteSourceSize","sourceSize","pivot","app","version","image","format","size","scale","smartupdate","generateGenericAtlas","gameParam","view","resolution","window","devicePixelRatio","autoDensity","backgroundColor","character","Character","world","World","resizeGame","newGameWidth","innerWidth","innerHeight","viewport","newGameHeight","renderer","resize","stage"],"sourceRoot":""}