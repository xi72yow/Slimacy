{"version":3,"file":"main.cbbc1601e5be14323cfc.js","mappings":"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","sources":["webpack://slimacy/./src/app/hero/hero.ts","webpack://slimacy/./src/app/world/world.ts","webpack://slimacy/./src/index.ts","webpack://slimacy/./src/app/utils/utils.ts"],"sourcesContent":["import {\n  AnimatedSprite,\n  Container,\n  Resource,\n  Spritesheet,\n  Texture,\n  TextureSource,\n  Ticker,\n} from \"pixi.js\";\nimport spritesheetData from \"../../assets/hero/hero.json\";\n\nexport enum CollisionTypes {\n  NONE = 0,\n  TOP = 1,\n  TOPRIGHT = 2,\n  RIGHT = 3,\n  BOTTOMRIGHT = 4,\n  BOTTOM = 5,\n  BOTTOMLEFT = 6,\n  LEFT = 7,\n  TOPLEFT = 8,\n  ALL = 9,\n}\n\nexport class Character extends Container {\n  private hero: AnimatedSprite;\n  private animations = new Map<string, Texture<Resource>[]>();\n  private currentAnimation: string;\n  private velocityVektor = { x: 0, y: 0 };\n  private speed = 1;\n  private pressedKeys = new Set<string>();\n  private collision = CollisionTypes.NONE;\n\n  constructor(screenWidth: number, screenHeight: number) {\n    super();\n\n    const texture = Texture.from(\"assets/hero/hero.png\");\n\n    const sheet = new Spritesheet(texture, spritesheetData);\n\n    sheet.parse((textures) => {\n      console.log(\"ðŸš€ ~ file: index.ts:28 ~ sheet.parse ~ textures:\", textures);\n      Object.keys(spritesheetData.animations).forEach((key) => {\n        const animation =\n          spritesheetData.animations[\n            key as keyof typeof spritesheetData.animations\n          ];\n        const animationSprites = animation.map(\n          (stringy: TextureSource | TextureSource[]) => Texture.from(stringy)\n        );\n        this.animations.set(key, animationSprites);\n      });\n\n      this.hero = new AnimatedSprite(this.animations.get(\"xi72yowslimemoveup\"));\n      this.currentAnimation = \"xi72yowslimemoveup\";\n      this.hero.animationSpeed = 0.125;\n      this.hero.play();\n      this.hero.roundPixels = false;\n      this.hero.x = screenWidth / 2;\n      this.hero.y = screenHeight / 2;\n      this.addChild(this.hero);\n    });\n\n    document.addEventListener(\"keydown\", this.onKeyDown.bind(this));\n    document.addEventListener(\"keyup\", this.onKeyUp.bind(this));\n  }\n\n  private setVelocityVektor(xCrement: number, yCrement: number): void {\n    const x = this.velocityVektor.x + xCrement;\n    const y = this.velocityVektor.y + yCrement;\n\n    if (!(x < -this.speed || x > this.speed)) {\n      this.velocityVektor.x = x;\n    }\n    if (!(y < -this.speed || y > this.speed)) {\n      this.velocityVektor.y = y;\n    }\n  }\n\n  private setCurrentAnimation(name: string): void {\n    if (name && this.currentAnimation !== name) {\n      this.currentAnimation = name;\n      this.hero.textures = this.animations.get(name);\n      this.hero.play();\n    }\n  }\n\n  private onKeyDown(e: KeyboardEvent): void {\n    this.pressedKeys.add(e.code);\n    switch (e.code) {\n      case \"KeyW\":\n        this.setVelocityVektor(0, -this.speed);\n        break;\n\n      case \"KeyA\":\n        this.setVelocityVektor(-this.speed, 0);\n        break;\n\n      case \"KeyS\":\n        this.setVelocityVektor(0, this.speed);\n        break;\n\n      case \"KeyD\":\n        this.setVelocityVektor(this.speed, 0);\n        break;\n\n      default:\n        break;\n    }\n\n    if (this.pressedKeys.has(\"KeyW\") && this.pressedKeys.has(\"KeyS\")) {\n      this.velocityVektor.y = 0;\n    }\n\n    if (this.pressedKeys.has(\"KeyA\") && this.pressedKeys.has(\"KeyD\")) {\n      this.velocityVektor.x = 0;\n    }\n  }\n\n  private onKeyUp(e: KeyboardEvent): void {\n    this.pressedKeys.delete(e.code);\n    switch (e.code) {\n      case \"KeyW\":\n        this.setVelocityVektor(0, this.speed);\n        break;\n\n      case \"KeyA\":\n        this.setVelocityVektor(this.speed, 0);\n        break;\n\n      case \"KeyS\":\n        this.setVelocityVektor(0, -this.speed);\n        break;\n\n      case \"KeyD\":\n        this.setVelocityVektor(-this.speed, 0);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  private velocityNormalization(): { x: number; y: number } {\n    const x = this.velocityVektor.x;\n    const y = this.velocityVektor.y;\n    const length = Math.sqrt(x * x + y * y);\n    if (length > 0) {\n      return { x: x / length, y: y / length };\n    }\n    return { x, y };\n  }\n\n  private getMovementDirection(): string {\n    const x = this.velocityVektor.x;\n    const y = this.velocityVektor.y;\n\n    /*   if (x === 0 && y === 0) {\n      return \"xi72yowslimemoveup\";\n    } */\n\n    if (x > 0) {\n      return \"xi72yowslimemoveright\";\n    }\n\n    if (x < 0) {\n      return \"xi72yowslimemoveleft\";\n    }\n\n    if (y > 0) {\n      return \"xi72yowslimemovedown\";\n    }\n\n    if (y < 0) {\n      return \"xi72yowslimemoveup\";\n    }\n  }\n\n  public update(deltaTime: number): void {\n    const normalizedVelocity = this.velocityNormalization();\n    const movementDirection = this.getMovementDirection();\n    this.setCurrentAnimation(movementDirection);\n\n    let xDirection = normalizedVelocity.x;\n    let yDirection = normalizedVelocity.y;\n    //console.log(\"ðŸš€ ~\", this.collision);\n\n    switch (this.collision) {\n      case CollisionTypes.TOP:\n        yDirection = yDirection < 0 ? 0 : yDirection;\n        break;\n\n      case CollisionTypes.RIGHT:\n        xDirection = xDirection > 0 ? 0 : xDirection;\n        break;\n      case CollisionTypes.BOTTOM:\n        yDirection = yDirection > 0 ? 0 : yDirection;\n        break;\n      case CollisionTypes.LEFT:\n        xDirection = xDirection < 0 ? 0 : xDirection;\n        break;\n      case CollisionTypes.TOPLEFT:\n        yDirection = yDirection < 0 ? 0 : yDirection;\n        xDirection = xDirection < 0 ? 0 : xDirection;\n        break;\n      case CollisionTypes.TOPRIGHT:\n        yDirection = yDirection < 0 ? 0 : yDirection;\n        xDirection = xDirection > 0 ? 0 : xDirection;\n        break;\n      case CollisionTypes.BOTTOMLEFT:\n        yDirection = yDirection > 0 ? 0 : yDirection;\n        xDirection = xDirection < 0 ? 0 : xDirection;\n        break;\n      case CollisionTypes.BOTTOMRIGHT:\n        yDirection = yDirection > 0 ? 0 : yDirection;\n        xDirection = xDirection > 0 ? 0 : xDirection;\n        break;\n\n      case CollisionTypes.NONE:\n        break;\n\n      default:\n        break;\n    }\n    this.hero.x = this.hero.x + xDirection * deltaTime;\n    this.hero.y = this.hero.y + yDirection * deltaTime;\n  }\n\n  public setCollision(collision: CollisionTypes): void {\n    this.collision = collision;\n  }\n}\n","import {\n  AnimatedSprite,\n  Container,\n  Rectangle,\n  Resource,\n  Sprite,\n  Spritesheet,\n  Texture,\n  TextureSource,\n  Ticker,\n} from \"pixi.js\";\nimport ldtkData from \"../../assets/world/world.ldtk.json\";\n\nimport spritesheetData from \"../../assets/world/world.json\";\nimport { Character, CollisionTypes } from \"app/hero/hero\";\n\nexport class World extends Container {\n  private hero;\n  private collidingTiles: Sprite[] = [];\n\n  constructor(hero: Character) {\n    super();\n    this.hero = hero;\n    const texture = Texture.from(\"assets/world/world.png\");\n    const sheet = new Spritesheet(texture, spritesheetData);\n    sheet.parse((textures) => {\n      console.log(\n        \"ðŸš€ ~ file: index.ts:28 ~ sheet.parse ~ textures:\",\n        textures,\n        ldtkData.levels[0].layerInstances[2].gridTiles\n      );\n\n      const colision = ldtkData.levels[0].layerInstances.find(\n        (layer) => layer.__type === \"IntGrid\"\n      ).intGridCsv;\n\n      const level = ldtkData.levels[0].layerInstances.find(\n        (layer) => layer.__type === \"Tiles\"\n      ).gridTiles;\n\n      const levelSprites = level.map((tile, i) => {\n        const piece: Sprite = new Sprite(\n          textures[`world_${tile.src[0]}_${tile.src[1]}.png`]\n        );\n        piece.x = tile.px[0];\n        piece.y = tile.px[1];\n        if (colision[i] === 2) this.collidingTiles.push(piece);\n        return piece;\n      });\n\n      console.log(this.collidingTiles.length);\n\n      this.addChild(...levelSprites);\n    });\n\n    Ticker.shared.add(this.update, this);\n  }\n\n  private update(deltaTime: number): void {\n    this.hero.update(deltaTime);\n    this.setCollisions();\n  }\n\n  private setCollisions(): void {\n    const collisions: CollisionTypes[] = [];\n    for (let i = 0; i < this.collidingTiles.length; i++) {\n      const tile = this.collidingTiles[i];\n      const hb = this.hero.getBounds();\n      const tb = tile.getBounds();\n\n      // detect colliding edge\n      const collision = this.detectCollision(hb, tb);\n      if (collision !== CollisionTypes.NONE) {\n        collisions.push(collision);\n      }\n    }\n    const uniqueCollisions = collisions.filter((element, index) => {\n      return collisions.indexOf(element) === index;\n    });\n\n    if (uniqueCollisions.length == 0) {\n      this.hero.setCollision(CollisionTypes.NONE);\n      return;\n    }\n\n    if (uniqueCollisions.length == 1) {\n      if (uniqueCollisions.includes(CollisionTypes.TOP)) {\n        this.hero.setCollision(CollisionTypes.TOP);\n      }\n      if (uniqueCollisions.includes(CollisionTypes.BOTTOM)) {\n        this.hero.setCollision(CollisionTypes.BOTTOM);\n      }\n      if (uniqueCollisions.includes(CollisionTypes.LEFT)) {\n        this.hero.setCollision(CollisionTypes.LEFT);\n      }\n      if (uniqueCollisions.includes(CollisionTypes.RIGHT)) {\n        this.hero.setCollision(CollisionTypes.RIGHT);\n      }\n    } else {\n      if (\n        uniqueCollisions.includes(CollisionTypes.TOP) &&\n        uniqueCollisions.includes(CollisionTypes.LEFT)\n      ) {\n        this.hero.setCollision(CollisionTypes.TOPLEFT);\n      }\n      if (\n        uniqueCollisions.includes(CollisionTypes.TOP) &&\n        uniqueCollisions.includes(CollisionTypes.RIGHT)\n      ) {\n        this.hero.setCollision(CollisionTypes.TOPRIGHT);\n      }\n      if (\n        uniqueCollisions.includes(CollisionTypes.BOTTOM) &&\n        uniqueCollisions.includes(CollisionTypes.LEFT)\n      ) {\n        this.hero.setCollision(CollisionTypes.BOTTOMLEFT);\n      }\n      if (\n        uniqueCollisions.includes(CollisionTypes.BOTTOM) &&\n        uniqueCollisions.includes(CollisionTypes.RIGHT)\n      ) {\n        this.hero.setCollision(CollisionTypes.BOTTOMRIGHT);\n      }\n    }\n  }\n\n  private multiplyVectors(a: number[], b: number[]) {\n    return a.map((x: number, i: number) => x * b[i]);\n  }\n\n  private vecAbs(a: [number, number]) {\n    return Math.sqrt(a[0] * a[0] + a[1] * a[1]);\n  }\n\n  private dotVecProduct(a: [number, number], b: [number, number]) {\n    const absA = this.vecAbs(a);\n    const absB = this.vecAbs(b);\n    const dotProduct = a[0] * b[0] + a[1] * b[1];\n    return dotProduct / (absA * absB);\n  }\n\n  private detectCollision(rect1: Rectangle, rect2: Rectangle): CollisionTypes {\n    const dx = rect2.x + rect2.width / 2 - (rect1.x + rect1.width / 2);\n    const dy = rect2.y + rect2.height / 2 - (rect1.y + rect1.height / 2);\n    const aw = (rect2.width + rect1.width) * 0.5;\n    const ah = (rect2.height + rect1.height) * 0.5;\n\n    if (Math.abs(dx) > aw || Math.abs(dy) > ah) return CollisionTypes.NONE;\n\n    if (Math.abs(dx / rect1.width) > Math.abs(dy / rect1.height)) {\n      if (dx < 0) return CollisionTypes.LEFT;\n      else return CollisionTypes.RIGHT;\n    } else {\n      if (dy < 0) return CollisionTypes.TOP;\n      else return CollisionTypes.BOTTOM;\n    }\n  }\n}\n","import { Application, Loader } from \"pixi.js\";\nimport * as PIXI from \"pixi.js\";\nimport { Character } from \"./app/hero/hero\";\nimport { World } from \"./app/world/world\";\n\nimport { generateGenericAtlas } from \"app/utils/utils\";\nconsole.log(generateGenericAtlas(4, 4, 16, 16, \"world\"));\n\nPIXI.settings.SCALE_MODE = PIXI.SCALE_MODES.NEAREST;\n\nconst gameParam = {\n  view: document.getElementById(\"pixi-canvas\") as HTMLCanvasElement,\n  width: 160,\n  height: 90,\n  resolution: window.devicePixelRatio || 1,\n  autoDensity: true,\n  backgroundColor: 0x6495ed,\n  scale: 3,\n};\n\nconst app = new Application(gameParam);\n\nconst character = new Character(gameParam.width, gameParam.height);\n\nconst world = new World(character);\n\napp.stage.addChild(world);\n\napp.stage.addChild(character);\n\nfunction resizeGame() {\n  const viewport = {\n    width: window.innerWidth,\n    height: window.innerHeight,\n  };\n\n  const newGameWidth = viewport.width;\n  const newGameHeight = (newGameWidth * gameParam.height) / gameParam.width;\n\n  app.renderer.resize(newGameWidth, newGameHeight);\n  app.stage.scale.set(gameParam.scale, gameParam.scale);\n}\n\nwindow.addEventListener(\"resize\", resizeGame);\n\nresizeGame();\n","type Atlas = {\n  [key: string]: { [key: string]: unknown };\n};\n\nexport function generateGenericAtlas(\n  rows: number,\n  cols: number,\n  width: number,\n  height: number,\n  textureName: string\n): Atlas {\n  const atlas: Atlas = {};\n  atlas[\"frames\"] = {};\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      atlas[\"frames\"][`${textureName}_${i * width}_${j * height}.png`] = {\n        frame: {\n          x: j * width,\n          y: i * height,\n          w: width,\n          h: height,\n        },\n        rotated: false,\n        trimmed: false,\n        spriteSourceSize: {\n          x: 0,\n          y: 0,\n          w: width,\n          h: height,\n        },\n        sourceSize: {\n          w: width,\n          h: height,\n        },\n        pivot: {\n          x: 0.5,\n          y: 0.5,\n        },\n      };\n    }\n    atlas[\"meta\"] = {\n      app: \"slimacy-utils\",\n      version: \"1.0\",\n      image: `${textureName}.png`,\n      format: \"RGBA8888\",\n      size: {\n        w: width * cols,\n        h: height * rows,\n      },\n      scale: \"1\",\n      smartupdate: \"\",\n    };\n  }\n  return atlas;\n}\n"],"names":["CollisionTypes","screenWidth","screenHeight","animations","Map","velocityVektor","x","y","speed","pressedKeys","Set","collision","NONE","texture","parse","textures","console","log","Object","keys","forEach","key","animationSprites","map","stringy","set","hero","get","currentAnimation","animationSpeed","play","roundPixels","addChild","document","addEventListener","onKeyDown","bind","onKeyUp","setVelocityVektor","xCrement","yCrement","this","setCurrentAnimation","name","e","add","code","has","delete","velocityNormalization","length","Math","sqrt","getMovementDirection","update","deltaTime","normalizedVelocity","movementDirection","xDirection","yDirection","TOP","RIGHT","BOTTOM","LEFT","TOPLEFT","TOPRIGHT","BOTTOMLEFT","BOTTOMRIGHT","setCollision","collidingTiles","colision","layer","__type","intGridCsv","levelSprites","gridTiles","tile","i","piece","src","px","push","setCollisions","collisions","hb","getBounds","tb","detectCollision","uniqueCollisions","filter","element","index","indexOf","includes","multiplyVectors","a","b","vecAbs","dotVecProduct","absA","absB","rect1","rect2","dx","width","dy","height","aw","ah","abs","rows","cols","textureName","atlas","j","frame","w","h","rotated","trimmed","spriteSourceSize","sourceSize","pivot","app","version","image","format","size","scale","smartupdate","generateGenericAtlas","gameParam","view","getElementById","resolution","window","devicePixelRatio","autoDensity","backgroundColor","character","Character","world","World","resizeGame","newGameWidth","innerWidth","innerHeight","viewport","newGameHeight","renderer","resize","stage"],"sourceRoot":""}